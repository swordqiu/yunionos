#!/bin/bash
# vi: ts=4 noexpandtab
#

TEMP_D=""
UMOUNT=""
DEBUG=0
DEF_MODULES=""

error() { echo "$@" 1>&2; }
debug() {
	[ "${DEBUG}" -ge "${1}" ] || return 0;
	shift;
	error "$@"
}
fail() { [ $# -eq 0 ] || error "$@"; exit 1; }
Usage() {
	cat <<EOF
Usage: ${0##*/} rootfs.tar kpkg.deb output_dir
   [re]Bundle a buildroot rootfs into a mini-cloud image

   Example:
    ${0##*/} [-e EXTRA_MODULES_DIR] rootfs.tar linux-image-*-virtuaal*.deb build-output/
EOF
}
bad_Usage() { Usage 1>&2; fail "$@"; }
cleanup() {
	[ -z "${UMOUNT}" ] || umount "${UMOUNT}"
	[ -z "${TEMP_D}" -o ! -d "${TEMP_D}" ] || rm -Rf "${TEMP_D}"
}
xrsync() {
	rsync --archive --xattrs --hard-links --acls --sparse "$@"
}

short_opts="hve:f:"
long_opts="initrd-busybox:,help,verbose"
getopt_out=$(getopt --name "${0##*/}" \
	--options "${short_opts}" --long "${long_opts}" -- "$@") &&
	eval set -- "${getopt_out}" ||
	bad_Usage

topdir=$(cd "${0%/*}/.." && pwd)

while [ $# -ne 0 ]; do
	cur=${1}; next=${2};
	case "$cur" in
		-h|--help) Usage; exit 0;;
		-v|--verbose) DEBUG=$((${DEBUG}+1));;
		-e) extra_modules_in="$next";;
		-f) firmware_in="$next";;
		--) shift; break;;
	esac
	shift;
done

if [ -n "$extra_modules_in" ]; then
  extra_modules_dir=$(readlink -f "$extra_modules_in")
  [ -d "$extra_modules_dir"  ] || bad_Usage "Extra modules dir: '$extra_modules_dir' not exists"
fi

[ $# -ge 3 ] || bad_Usage "must give rootfs.tar, kernel pkg, out_dir, src_type{pxe|iso}"
rootfs_in=${1}
kpkg_in=${2}
out_d_in=${3}
src_type_in=${4}
kpkg_in2=${5}

if [ -z "$src_type_in" ]; then
	src_type_in=pxe
fi

PATH="$topdir/bin:$PATH"
src_dir="${topdir}/src"
src2_dir=""
if [ -n "$src_type_in" ]; then
  src2_dir="${topdir}/src_${src_type_in}"
fi
src_symlinks="${topdir}/symlinks.list"
makedevs_list="${topdir}/makedevs.list"
fixup_fs="${topdir}/fixup-fs"

[ "$(id -u)" = "0" ] || fail "sorry... must be root"

[ -d "${src_dir}" ] || fail "no source dir ${src_d}"

TEMP_D=$(mktemp -d "${TMPDIR:-/tmp}/.${0##*/}.XXXXXX") ||
	fail "failed to make tempd"
trap cleanup EXIT

mkdir -p "${out_d_in}" && out_d=$(readlink -f "${out_d_in}") &&
	rootfs=$(readlink -f "${rootfs_in}") &&
	kpkg=$(readlink -f "${kpkg_in}") ||
	fail "failed to get full path for input"

if [ "$src_type_in" == "pxe" ]; then
    out_kernel="${out_d}/kernel"
    out_initramfs="${out_d}/initramfs"
else
    out_kernel="${out_d}/vmlinuz"
    out_initramfs="${out_d}/initrd.img"
fi
inter_d="$out_d/intermediate"

baremetal_prepare_d="$topdir/baremetal_prepare"
out_baremetal_prepare_d="$out_d/baremetal_prepare"
baremetal_root_fs="$out_baremetal_prepare_d/rootfs"
baremetal_prepare_out="$out_d/baremetal_prepare.tar.gz"

kernel_d="${TEMP_D}/kernel"
kern_list_full="${TEMP_D}/kernel.files.full"
kern_files="${TEMP_D}/kernel.files"
kern_modules="${TEMP_D}/kernel.files.modules"
overlay_d="${TEMP_D}/overlay"
initramfs_d="${TEMP_D}/initramfs"
initramfs="${TEMP_D}/initramfs.img"
stage_d="$TEMP_D/staging"

kernel_tar="$inter_d/kernel.tar"
overlay_tar="$inter_d/overlay.tar"

modfile="$src_dir/etc/modules"
if [ -f "$modfile" ]; then
	MODULES=$(sed 's,#.*,,' "$src_dir/etc/modules") ||
		fail "failed to read modules"
else
	MODULES=${DEF_MODULES}
fi

mkdir -p "${kernel_d}" "${overlay_d}" \
	"${initramfs_d}" "$inter_d" "$stage_d" ||
	fail "failed to make temp dirs"

# creating kernel tarball
case $kpkg_in in
    *.deb)
        dpkg -x "${kpkg_in}" "${kernel_d}" &&
        (test -z "${kpkg_in2}" || dpkg -x "${kpkg_in2}" "${kernel_d}") ||
	    fail "failed to extract kernel to ${kernel_d}"
        ;;
    *.rpm)
        (rpm2cpio "${kpkg_in}" > "${kernel_d}/tmp" && cd "${kernel_d}" && cpio -idm -F tmp && rm -f tmp) &&
        (test -z "${kpkg_in2}" || (rpm2cpio "${kpkg_in}" > "${kernel_d}/tmp" && cd "${kernel_d}" && cpio -idm -F tmp && rm -f tmp)) ||
	    fail "failed to extract kernel to ${kernel_d}"
        ;;
esac

if [ -n "$firmware_in" ]; then
	case $firmware_in in
		*.rpm)
			(rpm2cpio "${firmware_in}" > "${kernel_d}/tmp" && cd "${kernel_d}" && cpio -idm -F tmp && rm -f tmp)
			;;
	esac
fi

( cd "${kernel_d}" && find * -type f ) > "${kern_list_full}"

kver=""
for x in "$kernel_d/lib/modules"/*; do
	[ -d "$x/kernel" ] || continue
	[ -z "$kver" ] ||
		fail "2 or more things looked like kernels in lib/modules of $kpkg_in"
	kver="${x##*/}"
done
[ -n "$kver" ] ||
	fail "failed to find kernel version. no lib/modules/* ?"

echo "Kernel version $kver"

if [ -n "$extra_modules_dir" ]; then
  dst_mod_dir="${kernel_d}/lib/modules/${kver}/extra"
  echo "Copy $extra_modules_dir to $dst_mod_dir"
  cp $extra_modules_dir/**/*.ko $dst_mod_dir ||
   	  fail "failed to copy extract modules to $dst_mod_dir"
fi

find ${kernel_d} -type f -name '*.ko.xz' | xargs xz -d

depmod -a --basedir "${kernel_d}" "${kver}" ||
	fail "failed to run depmod"

ls "${kernel_d}/lib/modules/${kver}/"

if [ ! -x "${kernel_d}/lib/modules/${kver}/modules.builtin" ]; then
    echo "modules.builtin is missing"
    touch "${kernel_d}/lib/modules/${kver}/modules.builtin"
fi

if [ "$src_type_in" == "pxe" ]; then

mdep="${kernel_d}/lib/modules/${kver}/modules.dep"
for x in ${MODULES}; do
	grep -q "/${x}.ko" "${mdep}" ||
		{ error "WARNING: no ${x} in kernel package!"; continue; }
	awk -F: '$1 ~ mat {
		sub(":","",$1)
		printf("%s/%s\n",p,$1)
		leng=split($0,deps," ")
		x=2 # strange, but 0 contains nothing, 1 contains first field (with :)
		while ( x<=leng ) {
			printf("%s/%s\n", p, deps[x]);
			x++
		}
	}' mat="/${x}.ko$" p="lib/modules/${kver}" "${mdep}"
done > "${kern_modules}"
sort -u "${kern_modules}" > "${kern_files}"

else

find ${kernel_d}/lib/modules/${kver}/ -type f | sed "s|${kernel_d}/||" | grep -e "\.ko$" | sort -u > "${kern_files}"

if [ -n "$firmware_in" ]; then
  find ${kernel_d}/usr/lib/firmware/ -type f | sed "s|${kernel_d}/||" | sort -u > "${kern_files}"
fi

fi

vmlinuz=$( cd "${kernel_d}" && [ -f boot/vmlinuz-* ] &&
	echo boot/vmlinuz-* ) && echo "${vmlinuz}" >> "${kern_files}" &&
	ln -sf "$vmlinuz" "$kernel_d/vmlinuz" && echo "vmlinuz" >> "$kern_files" ||
	fail "no kernel (boot/vmlinuz-*) found in ${kpkg_in}"
echo "boot/config-$kver" >> "$kern_files"
echo "lib/modules/$kver/modules.order" >> "$kern_files"
echo "lib/modules/$kver/modules.builtin" >> "$kern_files"

cat $kern_files
echo $kernel_d
echo $kernel_tar

tar -C "${kernel_d}" -cpf - \
	--files-from "${kern_files}" > "${kernel_tar}" ||
	fail "failed to collect kernel files"

for src in "$src_dir" "$src2_dir"
do
  debug 1 "preparing source overlay from ${src}"
  xrsync "${src}/" "${overlay_d}" || fail "failed to copy source dir"
done

chown -R 0:0 "${overlay_d}" || fail "failed to chown files in overlay"

if [ -f "${src_symlinks}" ]; then
	( cd "${overlay_d}" &&
		while read src target; do
			{ [ -d "${target%/*}" ] || mkdir -p "${target%/*}"; } ||
				{ error "could not create ${target%/*}"; exit 1; }
			ln -sf "${src}" "${target}" || exit 1
		done < "${src_symlinks}"
	) || fail "failed to create symlinks"
fi
if [ -f "${makedevs_list}" ]; then
	xmakedevs "$makedevs_list" "$overlay_d" ||
		fail "failed to makedevs on overlay"
fi

( cd "$overlay_d" && tar -cpf - * ) > "$overlay_tar" ||
	fail "failed to make overlay_tar"

debug 1 "populating staging directory"
tar -C "$stage_d" -xpf - < "$rootfs_in" ||
	fail "failed to extract rootfs_tar"
tar -C "$stage_d" -xpf - < "$overlay_tar" ||
	fail "failed to extract overlay_tar"

if [ -x "${fixup_fs}" ]; then
	"${fixup_fs}" "${stage_d}" ||
		fail "failed to fixup filesystem"
fi

tar -C "$stage_d" -xpf - < "$kernel_tar" ||
    fail "failed to extract kernel_tar"

depmod -a --basedir "$stage_d" "${kver}" ||
	fail "failed to run depmod for kver ${kver} in output"

debug 1 "creating initramfs"
xrsync "$stage_d/" "$initramfs_d" ||
	fail "failed to copy to initramfs_d"
rm -Rf "$initramfs_d/vmlinuz" "$initramfs_d/boot" ||
	fail "failed to remove files in initramfs staging dir"

( cd "$initramfs_d" && find . | cpio --quiet -o -H newc |
    gzip -9 ) > "$initramfs"

if [ "$src_type_in" == "pxe" ]; then
debug 1 "creating baremetal prepare package"
mkdir -p $baremetal_root_fs ||
    fail "failed to create baremetal rootfs dir"
cp -rf $baremetal_prepare_d/* $out_baremetal_prepare_d ||
    fail "failed to copy baremetal prepare dir"
cp -rf $initramfs_d/* $baremetal_root_fs ||
    fail "failed to copy rootfs"
(cd "$out_baremetal_prepare_d" && tar -cpzf - *) > "$baremetal_prepare_out" ||
    fail "failed to create baremetal_prepare.tar.gz"
echo "wrote ${baremetal_prepare_out}"
fi

if [ "$src_type_in" == "pxe" ]; then
	cp -rf ${topdir}/pxelinux/* ${out_d} || fail "failed to copy pxelinux boot files"
fi

cp "${kernel_d}/${vmlinuz}" "${out_kernel}" ||
	fail "failed to copy kernel to ${out_kernel}"

{ [ -z "${out_initramfs}" ] || cp "${initramfs}" "${out_initramfs}"; }  ||
	fail "failed to copy initramfs to ${out_initramfs}"

echo "wrote ${out_kernel}"
echo "wrote ${out_initramfs}"

chmod +r "${out_kernel}"

exit 0
